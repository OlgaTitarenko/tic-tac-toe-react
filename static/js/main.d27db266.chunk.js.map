{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Reset","_this","this","react_default","a","createElement","onClick","props","React","Component","Square","_this2","winClass","concat","className","value","Board","_this3","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","squares","Array","fill","x","i","square","slice","calculateWinner","winner","setState","winLine","_this4","indexOf","App_Square","handleClick","status","_this5","renderSquare","App_Reset","handleClickNewGame","lines","length","_lines$i","slicedToArray","b","c","App","App_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d27db266.chunk.js","sourcesContent":["import React from 'react';\n\nclass Reset extends React.Component {\n  render() {\n    return (\n      <button\n        onClick={() => this.props.onClick()}\n      >\n        New Game\n      </button>\n    );\n  }\n}\n\nclass Square extends React.Component {\n  render() {\n    const winClass = `square ${this.props.winClass}`;\n    return (\n      <button\n        className={winClass}\n        onClick={() => this.props.onClick()}\n      >\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      x: true,\n    };\n  }\n\n  handleClick(i) {\n    const square = this.state.squares.slice();\n    if (calculateWinner(square).winner || square[i]) {\n      return;\n    }\n    square[i] = this.state.x ? 'X' : 'O';\n    this.setState({\n      squares: square,\n      x: !this.state.x,\n    });\n  }\n\n  handleClickNewGame() {\n    this.setState(\n      {\n        squares: Array(9).fill(null),\n        x: true,\n      },\n    );\n  }\n\n  renderSquare(i, winLine) {\n    let winClass = '';\n    if (winLine) {\n      winClass = (winLine.indexOf(i) !== -1) ? 'winner_line' : '';\n    }\n    return (\n      <Square\n        winClass={winClass}\n        value={this.state.squares[i]}\n        onClick={() => this.handleClick(i)}\n      />\n    );\n  }\n\n  render() {\n    const { winner } = calculateWinner(this.state.squares);\n    let winLine = '';\n    let status;\n    if (winner) {\n      status = `Winner: ${winner}`;\n      winLine = calculateWinner(this.state.squares).winLine;\n    } else if (this.state.squares.indexOf(null) === -1) {\n      status = 'Try again...';\n    } else {\n      status = `Next player: ${this.state.x ? 'X' : 'O'}`;\n    }\n    return (\n      <div>\n        <div className=\"status\">\n          {status}\n          {' '}\n        </div>\n\n        <div className=\"board-row\">\n          {this.renderSquare(0, winLine)}\n          {this.renderSquare(1, winLine)}\n          {this.renderSquare(2, winLine)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3, winLine)}\n          {this.renderSquare(4, winLine)}\n          {this.renderSquare(5, winLine)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6, winLine)}\n          {this.renderSquare(7, winLine)}\n          {this.renderSquare(8, winLine)}\n        </div>\n        <div className=\"new_game_button\">\n          <Reset\n            onClick={() => this.handleClickNewGame()}\n          />\n        </div>\n      </div>\n\n    );\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8],\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],\n    [0, 4, 8], [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\n      return {\n        winner: squares[a],\n        winLine: lines[i],\n      };\n    }\n  }\n  return {\n    winner: null,\n    winLine: null,\n  };\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}